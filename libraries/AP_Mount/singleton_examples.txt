/*------------------------------------
AP_Notify
------------------------------------*/

class AP_Notify
{
public:
    AP_Notify();

    /* Do not allow copies */
    AP_Notify(const AP_Notify &other) = delete;
    AP_Notify &operator=(const AP_Notify&) = delete;


    // get singleton instance
    static AP_Notify *instance(void) {
        return _instance;
    }

private:
    static AP_Notify *_instance;
}


    
AP_Notify *AP_Notify::_instance;

// Default constructor
AP_Notify::AP_Notify()
{
    if (_instance != nullptr) {
        AP_HAL::panic("AP_Notify must be singleton");
    }
    _instance = this;
}



/*------------------------------------
AP_GPS
------------------------------------*/
/*
comment: AP_SerialManager follows the same line

call like: AP::gps().status()
*/


class AP_GPS
{
public:
    AP_GPS();

    /* Do not allow copies */
    AP_GPS(const AP_GPS &other) = delete;
    AP_GPS &operator=(const AP_GPS&) = delete;

    static AP_GPS &gps() {
        return *_singleton;
    }

private:
    static AP_GPS *_singleton;
};

namespace AP {
    AP_GPS &gps();
};




AP_GPS *AP_GPS::_singleton;

// constructor
AP_GPS::AP_GPS()
{
    if (_singleton != nullptr) {
        AP_HAL::panic("AP_GPS must be singleton");
    }
    _singleton = this;
}

namespace AP {

AP_GPS &gps()
{
    return AP_GPS::gps();
}

};
