/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\olliw\storm32\28301.Status.uavcan
 */

#ifndef UAVCAN_OLLIW_STORM32_STATUS_HPP_INCLUDED
#define UAVCAN_OLLIW_STORM32_STATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Gimbal Status
#

uint8 mode

uint7 frame                     # the frame may be different from the control frame !!!

bool anglequaternion_tag        #that's instead of using a union, which is a bit clumsy
float32[4] orientation          #anglequaternion_tag = 0: roll, pitch, yaw in rad, 1: orientation quaternion in xyzw

float32[<=3] angular_velocity   #roll, pitch, yaw rates in rad/s, can be NAN if unknown
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.olliw.storm32.Status
saturated uint8 mode
saturated uint7 frame
saturated bool anglequaternion_tag
saturated float32[4] orientation
saturated float32[<=3] angular_velocity
******************************************************************************/

#undef mode
#undef frame
#undef anglequaternion_tag
#undef orientation
#undef angular_velocity

namespace uavcan
{
namespace olliw
{
namespace storm32
{

template <int _tmpl>
struct UAVCAN_EXPORT Status_
{
    typedef const Status_<_tmpl>& ParameterType;
    typedef Status_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > mode;
        typedef ::uavcan::IntegerSpec< 7, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > frame;
        typedef ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > anglequaternion_tag;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 4 > orientation;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > angular_velocity;
    };

    enum
    {
        MinBitLen
            = FieldTypes::mode::MinBitLen
            + FieldTypes::frame::MinBitLen
            + FieldTypes::anglequaternion_tag::MinBitLen
            + FieldTypes::orientation::MinBitLen
            + FieldTypes::angular_velocity::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::mode::MaxBitLen
            + FieldTypes::frame::MaxBitLen
            + FieldTypes::anglequaternion_tag::MaxBitLen
            + FieldTypes::orientation::MaxBitLen
            + FieldTypes::angular_velocity::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::mode >::Type mode;
    typename ::uavcan::StorageType< typename FieldTypes::frame >::Type frame;
    typename ::uavcan::StorageType< typename FieldTypes::anglequaternion_tag >::Type anglequaternion_tag;
    typename ::uavcan::StorageType< typename FieldTypes::orientation >::Type orientation;
    typename ::uavcan::StorageType< typename FieldTypes::angular_velocity >::Type angular_velocity;

    Status_()
        : mode()
        , frame()
        , anglequaternion_tag()
        , orientation()
        , angular_velocity()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<242 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 28301 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.olliw.storm32.Status";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Status_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        mode == rhs.mode &&
        frame == rhs.frame &&
        anglequaternion_tag == rhs.anglequaternion_tag &&
        orientation == rhs.orientation &&
        angular_velocity == rhs.angular_velocity;
}

template <int _tmpl>
bool Status_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(mode, rhs.mode) &&
        ::uavcan::areClose(frame, rhs.frame) &&
        ::uavcan::areClose(anglequaternion_tag, rhs.anglequaternion_tag) &&
        ::uavcan::areClose(orientation, rhs.orientation) &&
        ::uavcan::areClose(angular_velocity, rhs.angular_velocity);
}

template <int _tmpl>
int Status_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::mode::encode(self.mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::frame::encode(self.frame, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::anglequaternion_tag::encode(self.anglequaternion_tag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::orientation::encode(self.orientation, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angular_velocity::encode(self.angular_velocity, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Status_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::mode::decode(self.mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::frame::decode(self.frame, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::anglequaternion_tag::decode(self.anglequaternion_tag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::orientation::decode(self.orientation, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angular_velocity::decode(self.angular_velocity, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Status_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x5CFA0295A239498FULL);

    FieldTypes::mode::extendDataTypeSignature(signature);
    FieldTypes::frame::extendDataTypeSignature(signature);
    FieldTypes::anglequaternion_tag::extendDataTypeSignature(signature);
    FieldTypes::orientation::extendDataTypeSignature(signature);
    FieldTypes::angular_velocity::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Status_<0> Status;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::olliw::storm32::Status > _uavcan_gdtr_registrator_Status;

}

} // Namespace storm32
} // Namespace olliw
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::olliw::storm32::Status >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::olliw::storm32::Status::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::olliw::storm32::Status >::stream(Stream& s, ::uavcan::olliw::storm32::Status::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "mode: ";
    YamlStreamer< ::uavcan::olliw::storm32::Status::FieldTypes::mode >::stream(s, obj.mode, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "frame: ";
    YamlStreamer< ::uavcan::olliw::storm32::Status::FieldTypes::frame >::stream(s, obj.frame, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "anglequaternion_tag: ";
    YamlStreamer< ::uavcan::olliw::storm32::Status::FieldTypes::anglequaternion_tag >::stream(s, obj.anglequaternion_tag, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "orientation: ";
    YamlStreamer< ::uavcan::olliw::storm32::Status::FieldTypes::orientation >::stream(s, obj.orientation, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "angular_velocity: ";
    YamlStreamer< ::uavcan::olliw::storm32::Status::FieldTypes::angular_velocity >::stream(s, obj.angular_velocity, level + 1);
}

}

namespace uavcan
{
namespace olliw
{
namespace storm32
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::olliw::storm32::Status::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::olliw::storm32::Status >::stream(s, obj, 0);
    return s;
}

} // Namespace storm32
} // Namespace olliw
} // Namespace uavcan

#endif // UAVCAN_OLLIW_STORM32_STATUS_HPP_INCLUDED