/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\olliw\storm32\28310.Statistics.uavcan
 */

#ifndef UAVCAN_OLLIW_STORM32_STATISTICS_HPP_INCLUDED
#define UAVCAN_OLLIW_STORM32_STATISTICS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
uint32 tx_count
uint32 rx_count
uint32 error_count
uint32 rx_overflow_count

uint8 memory_pool_usage
uint8 memory_pool_capacity
uint8 rxbuffer_usage
uint8 rxbuffer_capacity
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.olliw.storm32.Statistics
saturated uint32 tx_count
saturated uint32 rx_count
saturated uint32 error_count
saturated uint32 rx_overflow_count
saturated uint8 memory_pool_usage
saturated uint8 memory_pool_capacity
saturated uint8 rxbuffer_usage
saturated uint8 rxbuffer_capacity
******************************************************************************/

#undef tx_count
#undef rx_count
#undef error_count
#undef rx_overflow_count
#undef memory_pool_usage
#undef memory_pool_capacity
#undef rxbuffer_usage
#undef rxbuffer_capacity

namespace uavcan
{
namespace olliw
{
namespace storm32
{

template <int _tmpl>
struct UAVCAN_EXPORT Statistics_
{
    typedef const Statistics_<_tmpl>& ParameterType;
    typedef Statistics_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_count;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_count;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > error_count;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_overflow_count;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > memory_pool_usage;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > memory_pool_capacity;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rxbuffer_usage;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rxbuffer_capacity;
    };

    enum
    {
        MinBitLen
            = FieldTypes::tx_count::MinBitLen
            + FieldTypes::rx_count::MinBitLen
            + FieldTypes::error_count::MinBitLen
            + FieldTypes::rx_overflow_count::MinBitLen
            + FieldTypes::memory_pool_usage::MinBitLen
            + FieldTypes::memory_pool_capacity::MinBitLen
            + FieldTypes::rxbuffer_usage::MinBitLen
            + FieldTypes::rxbuffer_capacity::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::tx_count::MaxBitLen
            + FieldTypes::rx_count::MaxBitLen
            + FieldTypes::error_count::MaxBitLen
            + FieldTypes::rx_overflow_count::MaxBitLen
            + FieldTypes::memory_pool_usage::MaxBitLen
            + FieldTypes::memory_pool_capacity::MaxBitLen
            + FieldTypes::rxbuffer_usage::MaxBitLen
            + FieldTypes::rxbuffer_capacity::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::tx_count >::Type tx_count;
    typename ::uavcan::StorageType< typename FieldTypes::rx_count >::Type rx_count;
    typename ::uavcan::StorageType< typename FieldTypes::error_count >::Type error_count;
    typename ::uavcan::StorageType< typename FieldTypes::rx_overflow_count >::Type rx_overflow_count;
    typename ::uavcan::StorageType< typename FieldTypes::memory_pool_usage >::Type memory_pool_usage;
    typename ::uavcan::StorageType< typename FieldTypes::memory_pool_capacity >::Type memory_pool_capacity;
    typename ::uavcan::StorageType< typename FieldTypes::rxbuffer_usage >::Type rxbuffer_usage;
    typename ::uavcan::StorageType< typename FieldTypes::rxbuffer_capacity >::Type rxbuffer_capacity;

    Statistics_()
        : tx_count()
        , rx_count()
        , error_count()
        , rx_overflow_count()
        , memory_pool_usage()
        , memory_pool_capacity()
        , rxbuffer_usage()
        , rxbuffer_capacity()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<160 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 28310 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.olliw.storm32.Statistics";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Statistics_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        tx_count == rhs.tx_count &&
        rx_count == rhs.rx_count &&
        error_count == rhs.error_count &&
        rx_overflow_count == rhs.rx_overflow_count &&
        memory_pool_usage == rhs.memory_pool_usage &&
        memory_pool_capacity == rhs.memory_pool_capacity &&
        rxbuffer_usage == rhs.rxbuffer_usage &&
        rxbuffer_capacity == rhs.rxbuffer_capacity;
}

template <int _tmpl>
bool Statistics_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(tx_count, rhs.tx_count) &&
        ::uavcan::areClose(rx_count, rhs.rx_count) &&
        ::uavcan::areClose(error_count, rhs.error_count) &&
        ::uavcan::areClose(rx_overflow_count, rhs.rx_overflow_count) &&
        ::uavcan::areClose(memory_pool_usage, rhs.memory_pool_usage) &&
        ::uavcan::areClose(memory_pool_capacity, rhs.memory_pool_capacity) &&
        ::uavcan::areClose(rxbuffer_usage, rhs.rxbuffer_usage) &&
        ::uavcan::areClose(rxbuffer_capacity, rhs.rxbuffer_capacity);
}

template <int _tmpl>
int Statistics_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::tx_count::encode(self.tx_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_count::encode(self.rx_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_count::encode(self.error_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_overflow_count::encode(self.rx_overflow_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::memory_pool_usage::encode(self.memory_pool_usage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::memory_pool_capacity::encode(self.memory_pool_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rxbuffer_usage::encode(self.rxbuffer_usage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rxbuffer_capacity::encode(self.rxbuffer_capacity, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Statistics_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::tx_count::decode(self.tx_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_count::decode(self.rx_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_count::decode(self.error_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_overflow_count::decode(self.rx_overflow_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::memory_pool_usage::decode(self.memory_pool_usage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::memory_pool_capacity::decode(self.memory_pool_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rxbuffer_usage::decode(self.rxbuffer_usage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rxbuffer_capacity::decode(self.rxbuffer_capacity, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Statistics_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x248C9AFC3D5ACFE8ULL);

    FieldTypes::tx_count::extendDataTypeSignature(signature);
    FieldTypes::rx_count::extendDataTypeSignature(signature);
    FieldTypes::error_count::extendDataTypeSignature(signature);
    FieldTypes::rx_overflow_count::extendDataTypeSignature(signature);
    FieldTypes::memory_pool_usage::extendDataTypeSignature(signature);
    FieldTypes::memory_pool_capacity::extendDataTypeSignature(signature);
    FieldTypes::rxbuffer_usage::extendDataTypeSignature(signature);
    FieldTypes::rxbuffer_capacity::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Statistics_<0> Statistics;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::olliw::storm32::Statistics > _uavcan_gdtr_registrator_Statistics;

}

} // Namespace storm32
} // Namespace olliw
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::olliw::storm32::Statistics >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::olliw::storm32::Statistics::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::olliw::storm32::Statistics >::stream(Stream& s, ::uavcan::olliw::storm32::Statistics::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "tx_count: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::tx_count >::stream(s, obj.tx_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_count: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::rx_count >::stream(s, obj.rx_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "error_count: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::error_count >::stream(s, obj.error_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_overflow_count: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::rx_overflow_count >::stream(s, obj.rx_overflow_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "memory_pool_usage: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::memory_pool_usage >::stream(s, obj.memory_pool_usage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "memory_pool_capacity: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::memory_pool_capacity >::stream(s, obj.memory_pool_capacity, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rxbuffer_usage: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::rxbuffer_usage >::stream(s, obj.rxbuffer_usage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rxbuffer_capacity: ";
    YamlStreamer< ::uavcan::olliw::storm32::Statistics::FieldTypes::rxbuffer_capacity >::stream(s, obj.rxbuffer_capacity, level + 1);
}

}

namespace uavcan
{
namespace olliw
{
namespace storm32
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::olliw::storm32::Statistics::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::olliw::storm32::Statistics >::stream(s, obj, 0);
    return s;
}

} // Namespace storm32
} // Namespace olliw
} // Namespace uavcan

#endif // UAVCAN_OLLIW_STORM32_STATISTICS_HPP_INCLUDED