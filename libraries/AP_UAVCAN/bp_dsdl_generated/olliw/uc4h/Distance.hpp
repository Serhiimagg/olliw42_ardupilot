/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\olliw\uc4h\28350.Distance.uavcan
 */

#ifndef UAVCAN_OLLIW_UC4H_DISTANCE_HPP_INCLUDED
#define UAVCAN_OLLIW_UC4H_DISTANCE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include "DistanceSensorProperties.hpp"

/******************************* Source text **********************************
#
# Distance
#
# Pitch and yaw angles in radians should be multiplied by
#
# ANGLE_MULTIPLIER = 15 / PI
#
# in order to convert them to a coarse representation, because:
#  - Fits the maximum range of a signed 4 bit or 5 bit integer, respectively
#  - Exactly represents the following angles:
#    0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, and negatives
#
# Orientation MUST be specified, and there MUST be only one sensor per orientation.
# This thus serves as a kind of major sensor_id.

float32 ANGLE_MULTIPLIER = 4.7746482927568605

int4 fixed_axis_pitch         # -PI/2 ... +PI/2 or -6 ... 6
int5 fixed_axis_yaw           # -PI ... +PI or -12 ... 12

uint4 sensor_sub_id           # Allow up to 16 sensors per orientation

uint3 RANGE_INVALID     = 0   # Range is unknown
uint3 RANGE_VALID       = 1   # Range field contains valid distance
uint3 RANGE_TOO_CLOSE   = 2   # Range field contains min range for the sensor
uint3 RANGE_TOO_FAR     = 3   # Range field contains max range for the sensor
uint3 range_flag

float16 range                 # Meters

uavcan.olliw.uc4h.DistanceSensorProperties[<=1] sensor_property  # made an array so that it is optional
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.olliw.uc4h.Distance
saturated int4 fixed_axis_pitch
saturated int5 fixed_axis_yaw
saturated uint4 sensor_sub_id
saturated uint3 range_flag
saturated float16 range
uavcan.olliw.uc4h.DistanceSensorProperties[<=1] sensor_property
******************************************************************************/

#undef fixed_axis_pitch
#undef fixed_axis_yaw
#undef sensor_sub_id
#undef range_flag
#undef range
#undef sensor_property
#undef ANGLE_MULTIPLIER
#undef RANGE_INVALID
#undef RANGE_VALID
#undef RANGE_TOO_CLOSE
#undef RANGE_TOO_FAR

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <int _tmpl>
struct UAVCAN_EXPORT Distance_
{
    typedef const Distance_<_tmpl>& ParameterType;
    typedef Distance_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > ANGLE_MULTIPLIER;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RANGE_INVALID;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RANGE_VALID;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RANGE_TOO_CLOSE;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RANGE_TOO_FAR;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > fixed_axis_pitch;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > fixed_axis_yaw;
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > sensor_sub_id;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > range_flag;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > range;
        typedef ::uavcan::Array< ::uavcan::olliw::uc4h::DistanceSensorProperties, ::uavcan::ArrayModeDynamic, 1 > sensor_property;
    };

    enum
    {
        MinBitLen
            = FieldTypes::fixed_axis_pitch::MinBitLen
            + FieldTypes::fixed_axis_yaw::MinBitLen
            + FieldTypes::sensor_sub_id::MinBitLen
            + FieldTypes::range_flag::MinBitLen
            + FieldTypes::range::MinBitLen
            + FieldTypes::sensor_property::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::fixed_axis_pitch::MaxBitLen
            + FieldTypes::fixed_axis_yaw::MaxBitLen
            + FieldTypes::sensor_sub_id::MaxBitLen
            + FieldTypes::range_flag::MaxBitLen
            + FieldTypes::range::MaxBitLen
            + FieldTypes::sensor_property::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::ANGLE_MULTIPLIER >::Type ANGLE_MULTIPLIER; // 4.7746482927568605
    static const typename ::uavcan::StorageType< typename ConstantTypes::RANGE_INVALID >::Type RANGE_INVALID; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::RANGE_VALID >::Type RANGE_VALID; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::RANGE_TOO_CLOSE >::Type RANGE_TOO_CLOSE; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::RANGE_TOO_FAR >::Type RANGE_TOO_FAR; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::fixed_axis_pitch >::Type fixed_axis_pitch;
    typename ::uavcan::StorageType< typename FieldTypes::fixed_axis_yaw >::Type fixed_axis_yaw;
    typename ::uavcan::StorageType< typename FieldTypes::sensor_sub_id >::Type sensor_sub_id;
    typename ::uavcan::StorageType< typename FieldTypes::range_flag >::Type range_flag;
    typename ::uavcan::StorageType< typename FieldTypes::range >::Type range;
    typename ::uavcan::StorageType< typename FieldTypes::sensor_property >::Type sensor_property;

    Distance_()
        : fixed_axis_pitch()
        , fixed_axis_yaw()
        , sensor_sub_id()
        , range_flag()
        , range()
        , sensor_property()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<97 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 28350 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.olliw.uc4h.Distance";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Distance_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        fixed_axis_pitch == rhs.fixed_axis_pitch &&
        fixed_axis_yaw == rhs.fixed_axis_yaw &&
        sensor_sub_id == rhs.sensor_sub_id &&
        range_flag == rhs.range_flag &&
        range == rhs.range &&
        sensor_property == rhs.sensor_property;
}

template <int _tmpl>
bool Distance_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(fixed_axis_pitch, rhs.fixed_axis_pitch) &&
        ::uavcan::areClose(fixed_axis_yaw, rhs.fixed_axis_yaw) &&
        ::uavcan::areClose(sensor_sub_id, rhs.sensor_sub_id) &&
        ::uavcan::areClose(range_flag, rhs.range_flag) &&
        ::uavcan::areClose(range, rhs.range) &&
        ::uavcan::areClose(sensor_property, rhs.sensor_property);
}

template <int _tmpl>
int Distance_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::fixed_axis_pitch::encode(self.fixed_axis_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::fixed_axis_yaw::encode(self.fixed_axis_yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sensor_sub_id::encode(self.sensor_sub_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range_flag::encode(self.range_flag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range::encode(self.range, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sensor_property::encode(self.sensor_property, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Distance_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::fixed_axis_pitch::decode(self.fixed_axis_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::fixed_axis_yaw::decode(self.fixed_axis_yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sensor_sub_id::decode(self.sensor_sub_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range_flag::decode(self.range_flag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range::decode(self.range, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sensor_property::decode(self.sensor_property, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Distance_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xA70FE3511E7EB86AULL);

    FieldTypes::fixed_axis_pitch::extendDataTypeSignature(signature);
    FieldTypes::fixed_axis_yaw::extendDataTypeSignature(signature);
    FieldTypes::sensor_sub_id::extendDataTypeSignature(signature);
    FieldTypes::range_flag::extendDataTypeSignature(signature);
    FieldTypes::range::extendDataTypeSignature(signature);
    FieldTypes::sensor_property::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Distance_<_tmpl>::ConstantTypes::ANGLE_MULTIPLIER >::Type
    Distance_<_tmpl>::ANGLE_MULTIPLIER = 4.7746482927568605; // 4.7746482927568605

template <int _tmpl>
const typename ::uavcan::StorageType< typename Distance_<_tmpl>::ConstantTypes::RANGE_INVALID >::Type
    Distance_<_tmpl>::RANGE_INVALID = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Distance_<_tmpl>::ConstantTypes::RANGE_VALID >::Type
    Distance_<_tmpl>::RANGE_VALID = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Distance_<_tmpl>::ConstantTypes::RANGE_TOO_CLOSE >::Type
    Distance_<_tmpl>::RANGE_TOO_CLOSE = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Distance_<_tmpl>::ConstantTypes::RANGE_TOO_FAR >::Type
    Distance_<_tmpl>::RANGE_TOO_FAR = 3U; // 3

/*
 * Final typedef
 */
typedef Distance_<0> Distance;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::olliw::uc4h::Distance > _uavcan_gdtr_registrator_Distance;

}

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::olliw::uc4h::Distance >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::olliw::uc4h::Distance::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::olliw::uc4h::Distance >::stream(Stream& s, ::uavcan::olliw::uc4h::Distance::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "fixed_axis_pitch: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::fixed_axis_pitch >::stream(s, obj.fixed_axis_pitch, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "fixed_axis_yaw: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::fixed_axis_yaw >::stream(s, obj.fixed_axis_yaw, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "sensor_sub_id: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::sensor_sub_id >::stream(s, obj.sensor_sub_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "range_flag: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::range_flag >::stream(s, obj.range_flag, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "range: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::range >::stream(s, obj.range, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "sensor_property: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Distance::FieldTypes::sensor_property >::stream(s, obj.sensor_property, level + 1);
}

}

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::olliw::uc4h::Distance::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::olliw::uc4h::Distance >::stream(s, obj, 0);
    return s;
}

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

#endif // UAVCAN_OLLIW_UC4H_DISTANCE_HPP_INCLUDED
