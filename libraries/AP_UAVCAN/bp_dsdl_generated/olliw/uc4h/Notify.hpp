/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\olliw\uc4h\28340.Notify.uavcan
 */

#ifndef UAVCAN_OLLIW_UC4H_NOTIFY_HPP_INCLUDED
#define UAVCAN_OLLIW_UC4H_NOTIFY_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Notify
#

uint8 type
uint8 subtype
uint8[<=64] payload
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.olliw.uc4h.Notify
saturated uint8 type
saturated uint8 subtype
saturated uint8[<=64] payload
******************************************************************************/

#undef type
#undef subtype
#undef payload

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <int _tmpl>
struct UAVCAN_EXPORT Notify_
{
    typedef const Notify_<_tmpl>& ParameterType;
    typedef Notify_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > type;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > subtype;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 64 > payload;
    };

    enum
    {
        MinBitLen
            = FieldTypes::type::MinBitLen
            + FieldTypes::subtype::MinBitLen
            + FieldTypes::payload::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::type::MaxBitLen
            + FieldTypes::subtype::MaxBitLen
            + FieldTypes::payload::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::type >::Type type;
    typename ::uavcan::StorageType< typename FieldTypes::subtype >::Type subtype;
    typename ::uavcan::StorageType< typename FieldTypes::payload >::Type payload;

    Notify_()
        : type()
        , subtype()
        , payload()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<535 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 28340 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.olliw.uc4h.Notify";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Notify_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        type == rhs.type &&
        subtype == rhs.subtype &&
        payload == rhs.payload;
}

template <int _tmpl>
bool Notify_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(type, rhs.type) &&
        ::uavcan::areClose(subtype, rhs.subtype) &&
        ::uavcan::areClose(payload, rhs.payload);
}

template <int _tmpl>
int Notify_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::type::encode(self.type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::subtype::encode(self.subtype, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::payload::encode(self.payload, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Notify_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::type::decode(self.type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::subtype::decode(self.subtype, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::payload::decode(self.payload, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Notify_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x69BC2CB0D471C96FULL);

    FieldTypes::type::extendDataTypeSignature(signature);
    FieldTypes::subtype::extendDataTypeSignature(signature);
    FieldTypes::payload::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Notify_<0> Notify;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::olliw::uc4h::Notify > _uavcan_gdtr_registrator_Notify;

}

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::olliw::uc4h::Notify >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::olliw::uc4h::Notify::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::olliw::uc4h::Notify >::stream(Stream& s, ::uavcan::olliw::uc4h::Notify::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "type: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Notify::FieldTypes::type >::stream(s, obj.type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "subtype: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Notify::FieldTypes::subtype >::stream(s, obj.subtype, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "payload: ";
    YamlStreamer< ::uavcan::olliw::uc4h::Notify::FieldTypes::payload >::stream(s, obj.payload, level + 1);
}

}

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::olliw::uc4h::Notify::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::olliw::uc4h::Notify >::stream(s, obj, 0);
    return s;
}

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

#endif // UAVCAN_OLLIW_UC4H_NOTIFY_HPP_INCLUDED