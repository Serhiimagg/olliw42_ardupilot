/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\olliw\uc4h\DistanceSensorProperties.uavcan
 */

#ifndef UAVCAN_OLLIW_UC4H_DISTANCESENSORPROPERTIES_HPP_INCLUDED
#define UAVCAN_OLLIW_UC4H_DISTANCESENSORPROPERTIES_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
float16 range_min                    # Meters. Can be NAN if unknown.
float16 range_max                    # Meters. Can be NAN if unknown.
float16 vertical_field_of_view       # Radians. Can be NAN if unknown.
float16 horizontal_field_of_view     # Radians. Can be NAN if unknown.
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.olliw.uc4h.DistanceSensorProperties
saturated float16 range_min
saturated float16 range_max
saturated float16 vertical_field_of_view
saturated float16 horizontal_field_of_view
******************************************************************************/

#undef range_min
#undef range_max
#undef vertical_field_of_view
#undef horizontal_field_of_view

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <int _tmpl>
struct UAVCAN_EXPORT DistanceSensorProperties_
{
    typedef const DistanceSensorProperties_<_tmpl>& ParameterType;
    typedef DistanceSensorProperties_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > range_min;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > range_max;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > vertical_field_of_view;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > horizontal_field_of_view;
    };

    enum
    {
        MinBitLen
            = FieldTypes::range_min::MinBitLen
            + FieldTypes::range_max::MinBitLen
            + FieldTypes::vertical_field_of_view::MinBitLen
            + FieldTypes::horizontal_field_of_view::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::range_min::MaxBitLen
            + FieldTypes::range_max::MaxBitLen
            + FieldTypes::vertical_field_of_view::MaxBitLen
            + FieldTypes::horizontal_field_of_view::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::range_min >::Type range_min;
    typename ::uavcan::StorageType< typename FieldTypes::range_max >::Type range_max;
    typename ::uavcan::StorageType< typename FieldTypes::vertical_field_of_view >::Type vertical_field_of_view;
    typename ::uavcan::StorageType< typename FieldTypes::horizontal_field_of_view >::Type horizontal_field_of_view;

    DistanceSensorProperties_()
        : range_min()
        , range_max()
        , vertical_field_of_view()
        , horizontal_field_of_view()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "uavcan.olliw.uc4h.DistanceSensorProperties";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool DistanceSensorProperties_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        range_min == rhs.range_min &&
        range_max == rhs.range_max &&
        vertical_field_of_view == rhs.vertical_field_of_view &&
        horizontal_field_of_view == rhs.horizontal_field_of_view;
}

template <int _tmpl>
bool DistanceSensorProperties_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(range_min, rhs.range_min) &&
        ::uavcan::areClose(range_max, rhs.range_max) &&
        ::uavcan::areClose(vertical_field_of_view, rhs.vertical_field_of_view) &&
        ::uavcan::areClose(horizontal_field_of_view, rhs.horizontal_field_of_view);
}

template <int _tmpl>
int DistanceSensorProperties_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::range_min::encode(self.range_min, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range_max::encode(self.range_max, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vertical_field_of_view::encode(self.vertical_field_of_view, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::horizontal_field_of_view::encode(self.horizontal_field_of_view, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int DistanceSensorProperties_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::range_min::decode(self.range_min, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::range_max::decode(self.range_max, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vertical_field_of_view::decode(self.vertical_field_of_view, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::horizontal_field_of_view::decode(self.horizontal_field_of_view, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature DistanceSensorProperties_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x7FC8D57D4F2EF1D1ULL);

    FieldTypes::range_min::extendDataTypeSignature(signature);
    FieldTypes::range_max::extendDataTypeSignature(signature);
    FieldTypes::vertical_field_of_view::extendDataTypeSignature(signature);
    FieldTypes::horizontal_field_of_view::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef DistanceSensorProperties_<0> DistanceSensorProperties;

// No default registration

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::olliw::uc4h::DistanceSensorProperties::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties >::stream(Stream& s, ::uavcan::olliw::uc4h::DistanceSensorProperties::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "range_min: ";
    YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties::FieldTypes::range_min >::stream(s, obj.range_min, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "range_max: ";
    YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties::FieldTypes::range_max >::stream(s, obj.range_max, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vertical_field_of_view: ";
    YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties::FieldTypes::vertical_field_of_view >::stream(s, obj.vertical_field_of_view, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "horizontal_field_of_view: ";
    YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties::FieldTypes::horizontal_field_of_view >::stream(s, obj.horizontal_field_of_view, level + 1);
}

}

namespace uavcan
{
namespace olliw
{
namespace uc4h
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::olliw::uc4h::DistanceSensorProperties::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::olliw::uc4h::DistanceSensorProperties >::stream(s, obj, 0);
    return s;
}

} // Namespace uc4h
} // Namespace olliw
} // Namespace uavcan

#endif // UAVCAN_OLLIW_UC4H_DISTANCESENSORPROPERTIES_HPP_INCLUDED