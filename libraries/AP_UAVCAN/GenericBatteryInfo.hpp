/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: c:\Users\Olli\Documents\GitHub\ardupilot\modules\uavcan\dsdl\uavcan\equipment\power\1093.GenericBatteryInfo.uavcan
 */

#ifndef UAVCAN_EQUIPMENT_POWER_GENERICBATTERYINFO_HPP_INCLUDED
#define UAVCAN_EQUIPMENT_POWER_GENERICBATTERYINFO_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Generic battery info.
#

uint16 battery_id

float16 voltage
float16 current
float16 charge_consumed_mAh

uint8 STATUS_FLAG_ERROR_OVERVOLTAGE  = 1
uint8 STATUS_FLAG_ERROR_UNDERVOLTAGE = 2
uint8 STATUS_FLAG_ERROR_OVERCURRENT  = 4
uint8 STATUS_FLAG_ERROR_UNDERCURRENT = 8
uint8 status_flags
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.power.GenericBatteryInfo
saturated uint16 battery_id
saturated float16 voltage
saturated float16 current
saturated float16 charge_consumed_mAh
saturated uint8 status_flags
******************************************************************************/

#undef battery_id
#undef voltage
#undef current
#undef charge_consumed_mAh
#undef status_flags
#undef STATUS_FLAG_ERROR_OVERVOLTAGE
#undef STATUS_FLAG_ERROR_UNDERVOLTAGE
#undef STATUS_FLAG_ERROR_OVERCURRENT
#undef STATUS_FLAG_ERROR_UNDERCURRENT

namespace uavcan
{
namespace equipment
{
namespace power
{

template <int _tmpl>
struct UAVCAN_EXPORT GenericBatteryInfo_
{
    typedef const GenericBatteryInfo_<_tmpl>& ParameterType;
    typedef GenericBatteryInfo_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_ERROR_OVERVOLTAGE;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_ERROR_UNDERVOLTAGE;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_ERROR_OVERCURRENT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_ERROR_UNDERCURRENT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > battery_id;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > charge_consumed_mAh;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status_flags;
    };

    enum
    {
        MinBitLen
            = FieldTypes::battery_id::MinBitLen
            + FieldTypes::voltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::charge_consumed_mAh::MinBitLen
            + FieldTypes::status_flags::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::battery_id::MaxBitLen
            + FieldTypes::voltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::charge_consumed_mAh::MaxBitLen
            + FieldTypes::status_flags::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_ERROR_OVERVOLTAGE >::Type STATUS_FLAG_ERROR_OVERVOLTAGE; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_ERROR_UNDERVOLTAGE >::Type STATUS_FLAG_ERROR_UNDERVOLTAGE; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_ERROR_OVERCURRENT >::Type STATUS_FLAG_ERROR_OVERCURRENT; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_ERROR_UNDERCURRENT >::Type STATUS_FLAG_ERROR_UNDERCURRENT; // 8

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::battery_id >::Type battery_id;
    typename ::uavcan::StorageType< typename FieldTypes::voltage >::Type voltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::charge_consumed_mAh >::Type charge_consumed_mAh;
    typename ::uavcan::StorageType< typename FieldTypes::status_flags >::Type status_flags;

    GenericBatteryInfo_()
        : battery_id()
        , voltage()
        , current()
        , charge_consumed_mAh()
        , status_flags()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<72 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 1093 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.power.GenericBatteryInfo";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GenericBatteryInfo_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        battery_id == rhs.battery_id &&
        voltage == rhs.voltage &&
        current == rhs.current &&
        charge_consumed_mAh == rhs.charge_consumed_mAh &&
        status_flags == rhs.status_flags;
}

template <int _tmpl>
bool GenericBatteryInfo_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(battery_id, rhs.battery_id) &&
        ::uavcan::areClose(voltage, rhs.voltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(charge_consumed_mAh, rhs.charge_consumed_mAh) &&
        ::uavcan::areClose(status_flags, rhs.status_flags);
}

template <int _tmpl>
int GenericBatteryInfo_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::battery_id::encode(self.battery_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::encode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charge_consumed_mAh::encode(self.charge_consumed_mAh, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::encode(self.status_flags, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GenericBatteryInfo_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::battery_id::decode(self.battery_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::decode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charge_consumed_mAh::decode(self.charge_consumed_mAh, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::decode(self.status_flags, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature GenericBatteryInfo_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xC7FECD4FE6804EB4ULL);

    FieldTypes::battery_id::extendDataTypeSignature(signature);
    FieldTypes::voltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::charge_consumed_mAh::extendDataTypeSignature(signature);
    FieldTypes::status_flags::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename GenericBatteryInfo_<_tmpl>::ConstantTypes::STATUS_FLAG_ERROR_OVERVOLTAGE >::Type
    GenericBatteryInfo_<_tmpl>::STATUS_FLAG_ERROR_OVERVOLTAGE = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename GenericBatteryInfo_<_tmpl>::ConstantTypes::STATUS_FLAG_ERROR_UNDERVOLTAGE >::Type
    GenericBatteryInfo_<_tmpl>::STATUS_FLAG_ERROR_UNDERVOLTAGE = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename GenericBatteryInfo_<_tmpl>::ConstantTypes::STATUS_FLAG_ERROR_OVERCURRENT >::Type
    GenericBatteryInfo_<_tmpl>::STATUS_FLAG_ERROR_OVERCURRENT = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename GenericBatteryInfo_<_tmpl>::ConstantTypes::STATUS_FLAG_ERROR_UNDERCURRENT >::Type
    GenericBatteryInfo_<_tmpl>::STATUS_FLAG_ERROR_UNDERCURRENT = 8U; // 8

/*
 * Final typedef
 */
typedef GenericBatteryInfo_<0> GenericBatteryInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::power::GenericBatteryInfo > _uavcan_gdtr_registrator_GenericBatteryInfo;

}

} // Namespace power
} // Namespace equipment
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::power::GenericBatteryInfo::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo >::stream(Stream& s, ::uavcan::equipment::power::GenericBatteryInfo::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "battery_id: ";
    YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo::FieldTypes::battery_id >::stream(s, obj.battery_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "voltage: ";
    YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo::FieldTypes::voltage >::stream(s, obj.voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "charge_consumed_mAh: ";
    YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo::FieldTypes::charge_consumed_mAh >::stream(s, obj.charge_consumed_mAh, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "status_flags: ";
    YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo::FieldTypes::status_flags >::stream(s, obj.status_flags, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::power::GenericBatteryInfo::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::power::GenericBatteryInfo >::stream(s, obj, 0);
    return s;
}

} // Namespace power
} // Namespace equipment
} // Namespace uavcan

#endif // UAVCAN_EQUIPMENT_POWER_GENERICBATTERYINFO_HPP_INCLUDED